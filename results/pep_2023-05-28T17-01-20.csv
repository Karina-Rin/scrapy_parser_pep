number,name,status
216,Docstring Format,
1,PEP Purpose and Guidelines,
222,Web Library Enhancements,
221,Import As,
215,String Interpolation,
220,"Coroutines, Generators, Continuations",
218,Adding a Built-In Set Object Type,
219,Stackless Python,
217,Display Hook for Interactive Use,
214,Extended Print Statement,
223,Change the Meaning of ,
212,Loop Counter Iteration,
213,Attribute Access Handlers,
210,Decoupling the Interpreter Loop,
209,Multi-dimensional Arrays,
211,Adding A New Outer Product Operator,
8104,2023 Term Steering Council election,
8102,2021 Term Steering Council election,
8103,2022 Term Steering Council election,
8101,2020 Term Steering Council election,
8100,January 2019 Steering Council election,
8016,The Steering Council Model,
8014,The Commons Governance Model,
8015,Organization of the Python community,
8011,Python Governance Model Lead by Trio of Pythonistas,
8010,The Technical Leader Governance Model,
8012,The Community Governance Model,
8002,Open Source Governance Survey,
8013,The External Council Governance Model,
8000,Python Language Governance Proposal Overview,
8001,Python Governance Voting Process,
3333,Python Web Server Gateway Interface v1.0.1,
3153,Asynchronous IO support,
3154,Pickle protocol version 4,
3155,Qualified name for classes and functions,
3152,Cofunctions,
3156,Asynchronous IO Support Rebooted: the “asyncio” Module,
3151,Reworking the OS and IO exception hierarchy,
3149,ABI version tagged .so files,
3147,PYC Repository Directories,
3150,Statement local namespaces (aka “given” clause),
3148,futures - execute computations asynchronously,
3145,Asynchronous I/O For subprocess.Popen,
3144,IP Address Manipulation Library for the Python Standard Library,
3146,Merging Unladen Swallow into CPython,
3142,Add a “while” clause to generator expressions,
3143,Standard daemon process library,
3141,A Type Hierarchy for Numbers,
3140,"str(container) should call str(item), not repr(item)",
3135,New Super,
3139,Cleaning out sys and the “interpreter” module,
3138,String representation in Python 3000,
3137,Immutable Bytes and Mutable Buffer,
3136,Labeled break and continue,
3132,Extended Iterable Unpacking,
3134,Exception Chaining and Embedded Tracebacks,
3129,Class Decorators,
3131,Supporting Non-ASCII Identifiers,
3130,Access to Current Module/Class/Function,
3133,Introducing Roles,
3128,BList: A Faster List-like Type,
3126,Remove Implicit String Concatenation,
3127,Integer Literal Support and Syntax,
3125,Remove Backslash Continuation,
3124,"Overloading, Generic Functions, Interfaces, and Adaptation",
3120,Using UTF-8 as the default source encoding,
3122,Delineation of the main module,
3119,Introducing Abstract Base Classes,
3121,Extension Module Initialization and Finalization,
3123,Making PyObject_HEAD conform to standard C,
3112,Bytes literals in Python 3000,
3116,New I/O,
3117,Postfix type declarations,
3114,Renaming iterator.next() to iterator.__next__(),
3115,Metaclasses in Python 3000,
3118,Revising the buffer protocol,
3113,Removal of Tuple Parameter Unpacking,
3111,Simple input built-in in Python 3000,
3109,Raising Exceptions in Python 3000,
3110,Catching Exceptions in Python 3000,
3108,Standard Library Reorganization,
3107,Function Annotations,
3104,Access to Names in Outer Scopes,
3103,A Switch/Case Statement,
3105,Make print a function,
3106,"Revamping dict.keys(), .values() and .items()",
3102,Keyword-Only Arguments,
3099,Things that will Not Change in Python 3000,
3101,Advanced String Formatting,
3002,Procedure for Backwards-Incompatible Changes,
3100,Miscellaneous Python 3.0 Plans,
3003,Python Language Moratorium,
754,IEEE 754 Floating Point Special Values,
3001,Procedure for reviewing and improving standard library modules,
801,Reserved,
3000,Python 3000,
713,Callable Modules,
710,Recording the provenance of installed packages,
708,Extending the Repository API to Mitigate Dependency Confusion Attacks,
711,PyBI: a standard format for distributing Python Binaries,
712,Adding a “converter” parameter to dataclasses.field,
709,Inlined comprehensions,
705,TypedMapping: Type Hints for Mappings with a Fixed Set of Keys,
704,Require virtual environments by default for package installers,
706,Filter for tarfile.extractall,
702,Marking deprecations using the type system,
707,A simplified signature for __exit__ and __aexit__,
703,Making the Global Interpreter Lock Optional in CPython,
701,Syntactic formalization of f-strings,
698,Override Decorator for Static Typing,
699,Remove private dict version field added in PEP 509,
700,Additional Fields for the Simple API for Package Indexes,
697,Limited C API for Extending Opaque Types,
696,Type defaults for TypeVarLikes,
692,Using TypedDict for more precise **kwargs typing,
695,Type Parameter Syntax,
693,Python 3.12 Release Schedule,
694,Upload 2.0 API for Python Package Repositories,
691,JSON-based Simple API for Python Package Indexes,
689,Unstable C API tier,
687,Isolating modules in the standard library,
685,Comparison of extra names for optional distribution dependencies,
686,Make UTF-8 mode default,
688,Making the buffer protocol accessible in Python,
690,Lazy Imports,
684,A Per-Interpreter GIL,
682,Format Specifier for Signed Zero,
683,"Immortal Objects, Using a Fixed Refcount",
681,Data Class Transforms,
678,Enriching Exceptions with Notes,
676,PEP Infrastructure Process,
680,tomllib: Support for Parsing TOML in the Standard Library,
677,Callable Type Syntax,
679,Allow parentheses in assert statements,
675,Arbitrary Literal String Type,
674,Disallow using macros as l-values,
671,Syntax for late-bound function argument defaults,
672,Unicode-related Security Considerations for Python,
670,Convert macros to functions in the Python C API,
673,Self Type,
668,Marking Python base environments as “externally managed”,
667,Consistent views of namespaces,
669,Low Impact Monitoring for CPython,
666,Reject Foolish Indentation,
665,A file format to list Python dependencies for reproducibility of an application,
663,"Standardizing Enum str(), repr(), and format() behaviors",
662,Editable installs via virtual wheels,
664,Python 3.11 Release Schedule,
660,Editable installs for pyproject.toml based builds (wheel based),
658,Serve Distribution Metadata in the Simple Repository API,
659,Specializing Adaptive Interpreter,
661,Sentinel Values,
656,Platform Tag for Linux Distributions Using Musl,
657,Include Fine Grained Error Locations in Tracebacks,
654,Exception Groups and except*,
652,Maintaining the Stable ABI,
655,Marking individual TypedDict items as required or potentially-missing,
653,Precise Semantics for Pattern Matching,
651,Robust Stack Overflow Handling,
650,Specifying Installer Requirements for Python Projects,
649,Deferred Evaluation Of Annotations Using Descriptors,
648,Extensible customizations of the interpreter at startup,
645,Allow writing optional types as ,
646,Variadic Generics,
647,User-Defined Type Guards,
643,Metadata for Package Source Distributions,
642,Explicit Pattern Syntax for Structural Pattern Matching,
641,Using an underscore in the version portion of Python 3.10 compatibility tags,
644,Require OpenSSL 1.1.1 or newer,
640,Unused variable syntax,
639,Improving License Clarity with Better Package Metadata,
636,Structural Pattern Matching: Tutorial,
637,Support for indexing with keyword arguments,
635,Structural Pattern Matching: Motivation and Rationale,
638,Syntactic Macros,
634,Structural Pattern Matching: Specification,
631,Dependency specification in pyproject.toml based on PEP 508,
632,Deprecate distutils module,
630,Isolating Extension Modules,
633,Dependency specification in pyproject.toml using an exploded TOML table,
623,Remove wstr from Unicode,
629,Versioning PyPI’s Simple API,
624,Remove Py_UNICODE encoder APIs,
625,Filename of a Source Distribution,
626,Precise line numbers for debugging and other tools.,
627,Recording installed projects,
628,Add ,
620,Hide implementation details from the C API,
619,Python 3.10 Release Schedule,
621,Storing project metadata in pyproject.toml,
622,Structural Pattern Matching,
618,Add Optional Length-Checking To zip,
616,String methods to remove prefixes and suffixes,
614,Relaxing Grammar Restrictions On Decorators,
615,Support for the IANA Time Zone Database in the Standard Library,
617,New PEG parser for CPython,
613,Explicit Type Aliases,
611,The one million limit,
612,Parameter Specification Variables,
607,Reducing CPython’s Feature Delivery Latency,
610,Recording the Direct URL Origin of installed distributions,
609,Python Packaging Authority (PyPA) Governance,
606,Python Compatibility Version,
608,Coordinated Python release,
605,A rolling feature release stream for CPython,
603,Adding a frozenmap type to collections,
604,Allow writing union types as ,
602,Annual Release Cycle for Python,
601,Forbid return/break/continue breaking out of finally,
599,The manylinux2014 Platform Tag,
596,Python 3.9 Release Schedule,
597,Add optional EncodingWarning,
598,Introducing incremental feature releases,
600,Future ‘manylinux’ Platform Tags for Portable Linux Built Distributions,
593,Flexible function and variable annotations,
590,Vectorcall: a fast calling protocol for CPython,
594,Removing dead batteries from the standard library,
591,Adding a final qualifier to typing,
592,Adding “Yank” Support to the Simple API,
595,Improving bugs.python.org,
589,TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys,
588,GitHub Issues Migration Plan,
587,Python Initialization Configuration,
585,Type Hinting Generics In Standard Collections,
586,Literal Types,
584,Add Union Operators To dict,
583,A Concurrency Memory Model for Python,
580,The C call protocol,
581,Using GitHub Issues for CPython,
582,Python local packages directory,
577,Augmented Assignment Expressions,
578,Python Runtime Audit Hooks,
574,Pickle protocol 5 with out-of-band data,
579,Refactoring C functions and methods,
576,Rationalize Built-in function classes,
575,Unifying function/method classes,
571,The manylinux2010 Platform Tag,
572,Assignment Expressions,
573,Module State Access from C Extension Methods,
569,Python 3.8 Release Schedule,
570,Python Positional-Only Parameters,
568,Generator-sensitivity for Context Variables,
565,Show DeprecationWarning in __main__,
566,Metadata for Python Software Packages 2.1,
567,Context Variables,
564,Add new time functions with nanosecond resolution,
562,Module __getattr__ and __dir__,
563,Postponed Evaluation of Annotations,
559,Built-in noop(),
560,Core support for typing module and generic types,
561,Distributing and Packaging Type Information,
558,Defined semantics for locals(),
556,Threaded garbage collection,
555,Context-local variables (contextvars),
557,Data Classes,
553,Built-in breakpoint(),
554,Multiple Interpreters in the Stdlib,
552,Deterministic pycs,
551,Security transparency in the Python runtime,
548,More Flexible Loop Control,
550,Execution Context,
547,Running extension modules using the -m option,
543,A Unified TLS API for Python,
544,Protocols: Structural subtyping (static duck typing),
546,Backport ssl.MemoryBIO and ssl.SSLObject to Python 2.7,
549,Instance Descriptors,
542,Dot Notation Assignment In Function Header,
540,Add a new UTF-8 Mode,
541,Package Index Name Retention,
545,Python Documentation Translations,
539,A New C-API for Thread-Local Storage in CPython,
538,Coercing the legacy C locale to a UTF-8 based locale,
537,Python 3.7 Release Schedule,
534,Improved Errors for Missing Standard Library Modules,
535,Rich comparison chaining,
536,Final Grammar for Literal String Interpolation,
533,Deterministic cleanup for iterators,
532,A circuit breaking protocol and binary operators,
529,Change Windows filesystem encoding to UTF-8,
530,Asynchronous Comprehensions,
531,Existence checking operators,
528,Change Windows console encoding to UTF-8,
527,Removing Un(der)used file types/extensions on PyPI,
524,Make os.urandom() blocking on Linux,
525,Asynchronous Generators,
523,Adding a frame evaluation API to CPython,
522,Allow BlockingIOError in security sensitive APIs,
526,Syntax for Variable Annotations,
521,Managing global context via ‘with’ blocks in generators and coroutines,
519,Adding a file system path protocol,
518,Specifying Minimum Build System Requirements for Python Projects,
517,A build-system independent format for source trees,
520,Preserving Class Attribute Definition Order,
515,Underscores in Numeric Literals,
514,Python registration in the Windows registry,
512,Migrating from hg.python.org to GitHub,
516,Build system abstraction for pip/conda etc,
513,A Platform Tag for Portable Linux Built Distributions,
508,Dependency specification for Python Software Packages,
509,Add a private version to dict,
511,API for code transformers,
510,Specialize functions with guards,
507,Migrate CPython to Git and GitLab,
505,None-aware operators,
506,Adding A Secrets Module To The Standard Library,
504,Using the System RNG by default,
501,General purpose string interpolation,
502,String Interpolation - Extended Discussion,
503,Simple Repository API,
500,A protocol for delegating datetime methods to their tzinfo implementations,
496,Environment Markers,
499,,
495,Local Time Disambiguation,
498,Literal String Interpolation,
497,A standard mechanism for backward compatibility,
494,Python 3.6 Release Schedule,
493,HTTPS verification migration tools for Python 2.7,
491,The Wheel Binary Package Format 1.9,
492,Coroutines with async and await syntax,
490,Chain exceptions at C level,
489,Multi-phase extension module initialization,
485,A Function for testing approximate equality,
486,Make the Python Launcher aware of virtual environments,
488,Elimination of PYO files,
484,Type Hints,
478,Python 3.5 Release Schedule,
479,Change StopIteration handling inside generators,
482,Literature Overview for Type Hints,
480,Surviving a Compromise of PyPI: End-to-end signing of packages,
487,Simpler customisation of class creation,
481,"Migrate CPython to Git, Github, and Phabricator",
476,Enabling certificate verification by default for stdlib http clients,
477,Backport ensurepip (PEP 453) to Python 2.7,
475,Retry system calls failing with EINTR,
474,Creating forge.python.org,
473,Adding structured data to built-in exceptions,
483,The Theory of Type Hints,
471,os.scandir() function – a better and faster directory iterator,
472,Support for indexing with keyword arguments,
470,Removing External Hosting Support on PyPI,
469,Migration of dict iteration code to Python 3,
468,Preserving the order of **kwargs in a function.,
464,Removal of the PyPI Mirror Authenticity API,
467,Minor API improvements for binary sequences,
463,Exception-catching expressions,
466,Network Security Enhancements for Python 2.7.x,
462,Core development workflow automation for CPython,
465,A dedicated infix operator for matrix multiplication,
461,Adding % formatting to bytes and bytearray,
460,Add binary interpolation and formatting,
459,Standard Metadata Extensions for Python Software Packages,
458,Secure PyPI downloads with signed repository metadata,
453,Explicit bootstrapping of pip in Python installations,
454,Add a new tracemalloc module to trace Python memory allocations,
455,Adding a key-transforming dictionary to collections,
456,Secure and interchangeable hash algorithm,
452,API for Cryptographic Hash Functions v2.0,
457,Notation For Positional-Only Parameters,
451,A ModuleSpec Type for the Import System,
449,Removal of the PyPI Mirror Auto Discovery and Naming Scheme,
446,Make newly created file descriptors non-inheritable,
447,Add __getdescriptor__ method to metaclass,
450,Adding A Statistics Module To The Standard Library,
448,Additional Unpacking Generalizations,
445,Add new APIs to customize Python memory allocators,
444,Python Web3 Interface,
443,Single-dispatch generic functions,
442,Safe object finalization,
441,Improving Python ZIP Application Support,
440,Version Identification and Dependency Specification,
438,Transitioning to release-file hosting on PyPI,
436,The Argument Clinic DSL,
439,Inclusion of implicit pip bootstrap in Python installation,
437,"A DSL for specifying signatures, annotations and argument converters",
434,IDLE Enhancement Exception for All Branches,
435,Adding an Enum type to the Python standard library,
431,Time zone support improvements,
433,Easier suppression of file descriptor inheritance,
429,Python 3.4 Release Schedule,
430,Migrating to Python 3 as the default online documentation,
432,Restructuring the CPython startup sequence,
427,The Wheel Binary Package Format 1.0,
428,The pathlib module – object-oriented filesystem paths,
424,A method for exposing a length hint,
425,Compatibility Tags for Built Distributions,
426,Metadata for Python Software Packages 2.0,
422,Simpler customisation of class creation,
423,Naming conventions and recipes related to packaging,
419,Protecting cleanup statements from interruptions,
420,Implicit Namespace Packages,
421,Adding sys.implementation,
418,"Add monotonic time, performance counter, and process time functions",
413,Faster evolution of the Python Standard Library,
417,Including mock in the Standard Library,
414,Explicit Unicode Literal for Python 3.3,
416,Add a frozendict builtin type,
415,Implement context suppression with exception attributes,
412,Key-Sharing Dictionary,
411,Provisional packages in the Python standard library,
408,Standard library __preview__ package,
410,Use decimal.Decimal type for timestamps,
409,Suppressing exception context,
405,Python Virtual Environments,
407,New release cycle and introducing long-term support versions,
406,Improved Encapsulation of Import State,
404,Python 2.8 Un-release Schedule,
403,General purpose decorator clause (aka “@in” clause),
402,Simplified Package Layout and Partitioning,
398,Python 3.3 Release Schedule,
399,Pure Python/C Accelerator Module Compatibility Requirements,
400,Deprecate codecs.StreamReader and codecs.StreamWriter,
401,BDFL Retirement,
397,Python launcher for Windows,
395,Qualified Names for Modules,
396,Module Version Numbers,
393,Flexible String Representation,
394,The “python” Command on Unix-Like Systems,
391,Dictionary-Based Configuration For Logging,
392,Python 3.2 Release Schedule,
390,Static metadata for Distutils,
385,Migrating from Subversion to Mercurial,
384,Defining a Stable ABI,
386,Changing the version comparison module in Distutils,
387,Backwards Compatibility Policy,
389,argparse - New Command Line Parsing Module,
381,Mirroring infrastructure for PyPI,
382,Namespace Packages,
383,Non-decodable Bytes in System Character Interfaces,
380,Syntax for Delegating to a Subgenerator,
379,Adding an Assignment Expression,
378,Format Specifier for Thousands Separator,
375,Python 3.1 Release Schedule,
377,Allow __enter__() methods to skip the statement body,
373,Python 2.7 Release Schedule,
376,Database of Installed Python Distributions,
372,Adding an ordered dictionary to collections,
368,Standard image protocol and class,
370,Per user site-packages directory,
371,Addition of the multiprocessing package to the standard library,
369,Post import hooks,
367,New Super,
365,Adding the pkg_resources module,
366,Main module explicit relative imports,
364,Transitioning to the Py3K Standard Library,
363,Syntax For Dynamic Attribute Access,
374,Choosing a distributed VCS for the Python project,
362,Function Signature Object,
360,Externally Maintained Packages,
361,Python 2.6 and 3.0 Release Schedule,
359,The “make” Statement,
358,The “bytes” Object,
354,Enumerations in Python,
356,Python 2.5 Release Schedule,
355,Path - Object oriented filesystem paths,
357,Allowing Any Object to be Used for Slicing,
353,Using ssize_t as the index type,
352,Required Superclass for Exceptions,
351,The freeze protocol,
350,Codetags,
348,Exception Reorganization for Python 3.0,
349,Allow str() to return unicode strings,
346,User Defined (”,
347,Migrating the Python CVS to Subversion,
344,Exception Chaining and Embedded Tracebacks,
343,The “with” Statement,
341,Unifying try-except and try-finally,
342,Coroutines via Enhanced Generators,
345,Metadata for Python Software Packages 1.2,
340,Anonymous Block Statements,
337,Logging Usage in the Standard Library,
338,Executing modules as scripts,
339,Design of the CPython Compiler,
336,Make None Callable,
335,Overloadable Boolean Operators,
334,Simple Coroutines via SuspendIteration,
332,Byte vectors and String/Unicode Unification,
333,Python Web Server Gateway Interface v1.0,
330,Python Bytecode Verification,
331,Locale-Independent Float/String Conversions,
329,Treating Builtins as Constants in the Standard Library,
327,Decimal Data Type,
326,A Case for Top and Bottom Values,
325,Resource-Release Support for Generators,
328,Imports: Multi-Line and Absolute/Relative,
324,subprocess - New process module,
321,Date/Time Parsing and Formatting,
322,Reverse Iteration,
323,Copyable Iterators,
320,Python 2.4 Release Schedule,
319,Python Synchronize/Asynchronize Block,
318,Decorators for Functions and Methods,
317,Eliminate Implicit Exception Instantiation,
316,Programming by Contract for Python,
315,Enhanced While Loop,
313,Adding Roman Numeral Literals to Python,
312,Simple Implicit Lambda,
311,Simplified Global Interpreter Lock Acquisition for Extensions,
309,Partial Function Application,
310,Reliable Acquisition/Release Pairs,
308,Conditional Expressions,
307,Extensions to the pickle protocol,
304,Controlling Generation of Bytecode Files,
303,Extend divmod() for Multiple Divisors,
306,How to Change Python’s Grammar,
305,CSV File API,
314,Metadata for Python Software Packages 1.1,
302,New Import Hooks,
299,Special __main__() function in modules,
301,Package Index and Metadata for Distutils,Either “success” or “fail”.
297,Support for System Upgrades,
296,Adding a bytes Object Type,
298,The Locked Buffer Interface,
293,Codec Error Handling Callbacks,
295,Interpretation of multiline string constants,
292,Simpler String Substitutions,
294,Type Names in the types Module,
291,Backward Compatibility for the Python 2 Standard Library,
290,Code Migration and Modernization,
288,Generators Attributes and Exceptions,
289,Generator Expressions,
286,Enhanced Argument Tuples,
287,reStructuredText Docstring Format,
284,Integer for-loops,
285,Adding a bool type,
282,A Logging System,
283,Python 2.3 Release Schedule,
279,The enumerate() built-in function,
280,Optimizing access to globals,
281,Loop Counter Iteration with range and xrange,
278,Universal Newline Support,
275,Switching on Multiple Values,
277,Unicode file name support for Windows NT,
276,Simple Iterator for ints,
274,Dict Comprehensions,
273,Import Modules from Zip Archives,
272,API for Block Encryption Algorithms v1.0,
271,Prefixing sys.path by command line option,
269,Pgen Module for Python,
270,uniq method for list objects,
267,Optimized Access to Module Namespaces,
268,Extended HTTP functionality and WebDAV,
265,Sorting Dictionaries by Value,
264,Future statements in simulated shells,
261,Support for “wide” Unicode characters,
262,A Database of Installed Python Packages,
266,Optimizing Global Variable/Attribute Access,
263,Defining Python Source Code Encodings,
260,Simplify xrange(),
255,Simple Generators,
257,Docstring Conventions,
259,Omit printing newline after newline,
256,Docstring Processing System Framework,
258,Docutils Design Specification,
254,Making Classes Look More Like Types,
253,Subtyping Built-in Types,
251,Python 2.2 Release Schedule,
252,Making Types Look More Like Classes,
250,Using site-packages on Windows,
244,The ,
245,Python Interface Syntax,
247,API for Cryptographic Hash Functions,
248,Python Database API Specification v1.0,
246,Object Adaptation,
249,Python Database API Specification v2.0,
240,Adding a Rational Literal to Python,
243,Module Repository Upload Mechanism,
239,Adding a Rational Type to Python,
241,Metadata for Python Software Packages,
242,Numeric Kinds,
238,Changing the Division Operator,
237,Unifying Long Integers and Integers,
235,Import on Case-Insensitive Platforms,
233,Python Online Help,
236,Back to the __future__,
234,Iterators,
230,Warning Framework,
231,__findattr__(),
232,Function Attributes,
229,Using Distutils to Build Python,
228,Reworking Python’s Numeric Model,
227,Statically Nested Scopes,
226,Python 2.1 Release Schedule,
224,Attribute Docstrings,
225,Elementwise/Objectwise Operators,
208,Reworking the Coercion Model,
207,Rich Comparisons,
206,Python Advanced Library,
205,Weak References,
203,Augmented Assignments,
204,Range Literals,
202,List Comprehensions,
160,Python 1.6 Release Schedule,
200,Python 2.0 Release Schedule,
201,Lockstep Iteration,
102,Doing Python Micro Releases,
103,Collecting information about git,
101,Doing Python Releases 101,
100,Python Unicode Integration,
20,The Zen of Python,
42,Feature Requests,
12,Sample reStructuredText PEP Template,
13,Python Language Governance,
10,Voting Guidelines,
6,Bug Fix Releases,
11,CPython platform support,
7,Style Guide for C Code,
9,Sample Plaintext PEP Template,
4,Deprecation of Standard Modules,
5,Guidelines for Language Evolution,
2,Procedure for Adding New Modules,
8,Style Guide for Python Code,
3,Guidelines for Handling Bug Reports,
